@io441
@in
3 150 49 150 64 117 52 95 57 63 3 73 -36 120 -17 72 122 -40 83 -22 20 -34 67 134 -13 35 52 -20 69 -33 42 -22 87 -26 59 64 6 137 60 -40 46 4 61 -21 122 39 4 95 24 148 94 -29 64 -23 78 -23 10 132 -25 17 -17 1 -25 18 -17 134 125 -45 5 -24 42 60 -26 116 62 136 69 13 98 15 140 16 57 35 -14 150 98 126 -28 36 111 -16 -34 0
-44 144 -46 99 80 107 38 50 127 81 83 125 -2 71 53 67 48 43 138 60 -21 65 49 -20 42 34 14 83 109 -2 -34 80 88 -11 95 71 -21 57 53 62 3 -34 -36 90 119 64 5 -35 16 48 100 7 45 107 86 133 44 62 -35 58 39 31 148 101
87 52 19 103 -11 48 6 45 20 79 64 149 -17 116 107 62 6 36 -22 -15 74 24 138 18 134 -34 16 132 -42 61 31 20 102 75 104 119 95 27 74 -36 128 30 -16 94 96 -28 26 59 135 -32 66 50 -37 45 104 105 -8 -7 10 -27 5 -5 8 -32 74 -3 -23 142 123 -6 95 43 106 -35 3 148 -48 -48 129 103 109 122 31 8 93 112 143 48 28 143 144 11 -21 74 13 -24 86 115
@end
@in
-1 1 0 1 0 1 0 -1 0 0 0 0 -1 -1 -1 -1 1 -1 1 0 0 0 0 -1 0 -1 1 0 0 -1 0 1 0 0 0 0 -1 -1 -1 -1 0 0 0 0 1 0
1 -1 1 0 -1 0 -1 -1 1 -1 1 -1 -1 1 -1 -1 1 1 -1 -1 1 1 -1 -1 0 -1 -1 1 1 1 -1 1 -1 0 0 0 0 -1 0 0 1 -1 -1
0 -1 -1 0 1 0 0 1 -1 1 0 0 0 1 1 -1 1 0 1 -1 -1 1 -1 -1 0 1 -1 -1 -1 0 0 -1 0 0 1 1 -1 1 1 -1 1 1 0 0 -1 0 1 0 0 1 0 -1 -1 -1 1 0 -1 1 0 -1 0 0 0 -1 1 -1 0 0 0 -1 0 0 0 0 1 -1 1 -1 0 -1 -1 1 -1 1 -1 0 1 1 0 0 -1
0 1 0 -1 -1 0 0 -1 1 0 1 0 -1 -1 0 1 0 -1 1 1 0 -1 1 -1 0 0 0 1 1 1 1 -1 0 0 0 0 1 1 1 1 0 -1 0 -1 0 -1 0
-1 1 0 0 -1 1 1 1 -1 0 -1 1 -1 0 -1 0 -1 0 1 1 0 1 1 1 -1 -1 1 -1 1
@end
@in
-9 19 83 42 84 131 54 119 83 58 143 9 144 131 -2 1 123 92 -23 46 84 149 21 83 149 81 114 130 68 133 112 33 -3 109 60 143 -44 116 29 121 79 147 46 135 103 90 134 -32 -32 27 24 13 133 -17 22 41 40 119 -18 10 -29 -9 39 -2 -24 150 18 122 33 99 -42 -12 -23 14 124 70 98 17 32 -14 -2 37 79 -42 72 101 118 68 -19 84 140 46 145 126 129 25 148 2 -39 -14 64 71 -34 10 101 -8 54 66 23 102 97 87 36 84 82 -36 15 139 100 105 100 110 16 16 119 103 104 66 126 -17 -27 85 -50 107 -21 89 120 21 55 116 43 101 24 6 140 65 109 52 150 -3 29 -38 14 121 -36 75 84 53 32 31 97 62 12 67 47 91 109 -37 94 111 95 122 53 40 39 -10 -41 117 16 49 -29 50 -35 -21 -45 -30 63 32 142 141 57 96 117 61 -30 -16 67 -35 139 66 40 12 138 96 -13 -45 34 -23 138 17 -6 122 122 118 -28 150 10 -10 -14 143 89 -33 2 24 62 57 -33 137 80 1 9 -50 76 63 90 87 24 19 -14 -12 44 100 -3 122 -22 90 53 -43 52 -35 114 49 -12 111 73 105
@end
@out
3 19 132 42 148 131 106 95 140 121 146 82 -36 120 -17 72 123 -40 -23 24 104 115 88 134 136 35 114 110 137
-33 154 33 84 83 119 207 6 137 60 -40 125 151 107 114 103 129 134 95 -32 175 94 -16 64 -23 22 -23 40 132 -25 10 -17 1 39 -2 -17 134 18 122 5 -24 0 60 -26 14 124 70 69 17 98 1 138 53 136 35 58 251 118 126 -28 120
111 -16 111 126 85 169 148 99 -39 93 102 121 -34 10 83 -8 52 66 53 67 97 43 138 144 82 65 49 -20 142 139 14 193 125 16 119 80 104 66 95 -17 -27 142 3 62 -18 89 84 111 55 180 5 -35 16 6 240 7 109 159 86 130 73 24
-35 121 39 106 232 154 87 83 116 165 1 67 6 91 20 42 64 149 95 116 53 62 45 -10 -41 102 90 24 109 50 99 -34 16 102 21 61 142 161 57 171 104 119 65 -16 141 -36 139 66 24 94 138 -28 13 14 169 -23 138 17 -6 45 226 223 -36 143 10 -10 -14 143 97 -32 76 -3 39 142 90 -6 80 44 115 -35 76 63 90 -48 153 103 -14 122 75 8 90 112 121 90 53 100 52 -35 114 74 13 111 86 105
@end
@end


@info
1.  read values from in[0] (A), in[1] (S) and in[2] (B)
2a. write A to     out[0] if S = -1
2b. write B to     out[0] if S = 1
2c. write A + B to out[0] if S = 0
@end

@req
003_compare
@end